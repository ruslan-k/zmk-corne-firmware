/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        enter {
            bindings = <&kp ENTER>;
            key-positions = <21 22>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 10>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        ru_layer_switch {
            bindings = <&tog 1>;
            key-positions = <36 38>;
            layers = <0>;
            timeout-ms = <50>;
        };

        base_layer_switch {
            bindings = <&tog 0>;
            key-positions = <36 38>;
            layers = <1>;
            timeout-ms = <50>;
        };

        ru_yo {
            bindings = <&kp RU_CYRILLIC_IO>;
            key-positions = <41 5>;
            layers = <1>;
            timeout-ms = <50>;
        };

        ru_schya {
            bindings = <&kp RU_CYRILLIC_SHCHA>;
            key-positions = <41 8>;
            layers = <1>;
            timeout-ms = <50>;
        };

        ru_hard_sign {
            bindings = <&kp RU_CYRILLIC_HARD_SIGN>;
            key-positions = <41 31>;
            layers = <1>;
            timeout-ms = <50>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
            layers = <1 0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q           &kp W           &kp E               &kp R             &kp T        &kp Y      &kp U              &kp I                &kp O             &kp P                &none
&none  &mt LEFT_WIN A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G        &kp H      &mt RIGHT_SHIFT J  &mt RIGHT_CONTROL K  &kp RIGHT_ALT     &mt TILDE RIGHT_GUI  &none
&none  &kp Z           &kp X           &kp C               &kp V             &kp B        &kp N      &kp M              &kp AMPERSAND        &kp LEFT_BRACKET  &kp RIGHT_BRACKET    &none
                                       &kp LGUI            &mo 2             &kp SPACE    &kp SPACE  &mo 3              &kp RALT
            >;
        };

        russian_layer {
            bindings = <
&none  &kp RU_CYRILLIC_SHORT_I  &kp RU_CYRILLIC_TSE   &kp E               &kp RU_CYRILLIC_KA  &kp RU_CYRILLIC_IE    &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE        &kp RU_CYRILLIC_SHA  &kp RU_CYRILLIC_ZE  &kp RU_CYRILLIC_HA   &none
&none  &mt LEFT_WIN RU_CYRILLIC_EF       &mt LEFT_ALT RU_CYRILLIC_YERU  &mt LEFT_CONTROL RU_CYRILLIC_VE  &mt LEFT_SHIFT RU_CYRILLIC_A   &kp RU_CYRILLIC_PE    &kp RU_CYRILLIC_ER  &mt RIGHT_SHIFT RU_CYRILLIC_O         &mt RIGHT_CONTROL RU_CYRILLIC_EL  &mt RIGHT_ALT RU_CYRILLIC_DE   &mt RIGHT_GUI RU_CYRILLIC_ZHE  &none
&none  &kp RU_CYRILLIC_YA       &kp RU_CYRILLIC_CHE   &kp RU_CYRILLIC_ES  &kp RU_CYRILLIC_EM  &kp RU_CYRILLIC_I     &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_BE   &kp RU_CYRILLIC_YU  &kp RU_CYRILLIC_E    &none
                                                      &kp LGUI            &mo 2               &kp SPACE             &kp SPACE           &mo 3                      &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp N1        &kp N2        &kp N3        &kp N4             &kp N5             &kp N6      &kp N7                &kp N8                &kp N9   &kp N0   &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &kp K_MUTE  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp F11  &kp F12  &none
&none  &kp F1        &kp F2        &kp F3        &kp F4             &kp F5             &kp F6      &kp F7                &kp F8                &kp F9   &kp F10  &none
                                   &kp LGUI      &none              &kp SPACE          &kp RET     &none                 &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp EXCL   &kp AT    &kp HASH   &kp DLLR          &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &none
&none  &kp PG_UP  &kp UP    &kp PG_DN  &kp SINGLE_QUOTE  &kp TILDE    &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &none
&none  &kp LEFT   &kp DOWN  &kp RIGHT  &kp DOT           &kp COMMA    &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &none
                            &kp LGUI   &none             &kp SPACE    &kp SPACE  &none      &kp RALT
            >;
        };
    };
};
