/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>


#define HOST_OS 1
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"
#include "zmk-helpers/unicode-chars/russian.dtsi"

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat,   &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt,  &kp, &lpar_lt,    KEYS_L THUMBS)  // "    "   "   "
MAKE_HRM(hmr_rpar_gt,  &kp, &rpar_gt,    KEYS_L THUMBS)  // "    "   "   "



&mt {
    tapping-term-ms = <400>;
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        ru_layer_switch {
            bindings = <&tog 1>;
            key-positions = <14 38>;
            slow-release;
        };

        ru_yo {
            bindings = <&ru_yo>;
            key-positions = <5 40>;
            layers = <1>;
            timeout-ms = <50>;
        };

        ru_schya {
            bindings = <&ru_shch>;
            key-positions = <8 40>;
            layers = <1>;
            timeout-ms = <50>;
        };

        ru_hard_sign {
            bindings = <&ru_hard>;
            key-positions = <31 40>;
            layers = <1>;
            timeout-ms = <50>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
            layers = <1 0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q           &kp W           &kp E               &kp R             &kp T        &kp Y      &kp U              &kp I                &kp O             &kp P                &none
&none  &mt LEFT_WIN A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G        &kp H      &mt RIGHT_SHIFT J  &mt RIGHT_CONTROL K  &mt RIGHT_ALT L   &mt TILDE RIGHT_GUI  &none
&none  &kp Z           &kp X           &kp C               &kp V             &kp B        &kp N      &kp M              &kp AMPERSAND        &kp LEFT_BRACKET  &kp RIGHT_BRACKET    &none
                                       &kp BACKSPACE       &mo 2             &kp SPACE    &kp SPACE  &mo 3              &kp ENTER
            >;
        };

        ru {
            bindings = <
&none  &ru_y      &ru_ts  &ru_u                            &ru_k            &ru_ye    &ru_n  &ru_g            &ru_sh               &ru_z            &ru_kh             &none
&none  &ru_f      &ru_bi  &ru_v  &ru_A  &ru_p    &ru_r  &ru_o  &ru_l  &ru_d  &ru_zh  &none
&none  &ru_ya     &ru_ch            &ru_s               &ru_m            &ru_i     &ru_t  &ru_soft      &ru_b                &ru_yu            &ru_e              &none
                                                                   &kp BACKSPACE                    &mo 2                         &kp SPACE             &kp SPACE           &mo 3                          &kp ENTER
            >;
        };

        lower {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp N1        &kp N2        &kp N3        &kp N4             &kp N5             &kp N6      &kp N7                &kp N8                &kp N9   &kp N0   &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &kp K_MUTE  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp F11  &kp F12  &none
&none  &kp F1        &kp F2        &kp F3        &kp F4             &kp F5             &kp F6      &kp F7                &kp F8                &kp F9   &kp F10  &none
                                   &kp LGUI      &none              &kp SPACE          &kp RET     &none                 &kp RALT
            >;
        };

        raise {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp EXCL   &kp AT    &kp HASH   &kp DLLR           &kp PRCNT       &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &none
&none  &kp PG_UP  &kp UP    &kp PG_DN  &kp DOUBLE_QUOTES  &kp TILDE2      &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &none
&none  &kp LEFT   &kp DOWN  &kp RIGHT  &kp KP_DOT         &kp KP_COMMA    &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &none
                            &kp LGUI   &none              &kp SPACE       &kp SPACE  &none      &kp RALT
            >;
        };
    };
};
