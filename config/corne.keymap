#define HOST_OS 1
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"
#include "behaviors.dtsi"
#include "dt-bindings/zmk/bt.h"
#include "dt-bindings/zmk/keys.h"

ZMK_UNICODE_PAIR(ru_a    ,    N0 , N4 , N3 , N0 ,    N0 , N4 , N1 , N0) // а/А
ZMK_UNICODE_PAIR(ru_b    ,    N0 , N4 , N3 , N1 ,    N0 , N4 , N1 , N1) // б/Б
ZMK_UNICODE_PAIR(ru_v    ,    N0 , N4 , N3 , N2 ,    N0 , N4 , N1 , N2) // в/В
ZMK_UNICODE_PAIR(ru_g    ,    N0 , N4 , N3 , N3 ,    N0 , N4 , N1 , N3) // г/Г
ZMK_UNICODE_PAIR(ru_d    ,    N0 , N4 , N3 , N4 ,    N0 , N4 , N1 , N4) // д/Д
ZMK_UNICODE_PAIR(ru_ye   ,    N0 , N4 , N3 , N5 ,    N0 , N4 , N1 , N5) // е/Е
ZMK_UNICODE_PAIR(ru_yo   ,    N0 , N4 , N5 , N1 ,    N0 , N4 , N0 , N1) // ё/Ё
ZMK_UNICODE_PAIR(ru_zh   ,    N0 , N4 , N3 , N6 ,    N0 , N4 , N1 , N6) // ж/Ж
ZMK_UNICODE_PAIR(ru_z    ,    N0 , N4 , N3 , N7 ,    N0 , N4 , N1 , N7) // з/З
ZMK_UNICODE_PAIR(ru_i    ,    N0 , N4 , N3 , N8 ,    N0 , N4 , N1 , N8) // и/И
ZMK_UNICODE_PAIR(ru_y    ,    N0 , N4 , N3 , N9 ,    N0 , N4 , N1 , N9) // й/Й
ZMK_UNICODE_PAIR(ru_k    ,    N0 , N4 , N3 ,  A ,    N0 , N4 , N1 ,  A) // к/К
ZMK_UNICODE_PAIR(ru_l    ,    N0 , N4 , N3 ,  B ,    N0 , N4 , N1 ,  B) // л/Л
ZMK_UNICODE_PAIR(ru_m    ,    N0 , N4 , N3 ,  C ,    N0 , N4 , N1 ,  C) // м/М
ZMK_UNICODE_PAIR(ru_n    ,    N0 , N4 , N3 ,  D ,    N0 , N4 , N1 ,  D) // н/Н
ZMK_UNICODE_PAIR(ru_o    ,    N0 , N4 , N3 ,  E ,    N0 , N4 , N1 ,  E) // о/О
ZMK_UNICODE_PAIR(ru_p    ,    N0 , N4 , N3 ,  F ,    N0 , N4 , N1 ,  F) // п/П
ZMK_UNICODE_PAIR(ru_r    ,    N0 , N4 , N4 , N0 ,    N0 , N4 , N2 , N0) // р/Р
ZMK_UNICODE_PAIR(ru_s    ,    N0 , N4 , N4 , N1 ,    N0 , N4 , N2 , N1) // с/С
ZMK_UNICODE_PAIR(ru_t    ,    N0 , N4 , N4 , N2 ,    N0 , N4 , N2 , N2) // т/Т
ZMK_UNICODE_PAIR(ru_u    ,    N0 , N4 , N4 , N3 ,    N0 , N4 , N2 , N3) // у/У
ZMK_UNICODE_PAIR(ru_f    ,    N0 , N4 , N4 , N4 ,    N0 , N4 , N2 , N4) // ф/Ф
ZMK_UNICODE_PAIR(ru_kh   ,    N0 , N4 , N4 , N5 ,    N0 , N4 , N2 , N5) // х/Х
ZMK_UNICODE_PAIR(ru_ts   ,    N0 , N4 , N4 , N6 ,    N0 , N4 , N2 , N6) // ц/Ц
ZMK_UNICODE_PAIR(ru_ch   ,    N0 , N4 , N4 , N7 ,    N0 , N4 , N2 , N7) // ч/Ч
ZMK_UNICODE_PAIR(ru_sh   ,    N0 , N4 , N4 , N8 ,    N0 , N4 , N2 , N8) // ш/Ш
ZMK_UNICODE_PAIR(ru_shch ,    N0 , N4 , N4 , N9 ,    N0 , N4 , N2 , N9) // щ/Щ
ZMK_UNICODE_PAIR(ru_hard ,    N0 , N4 , N4 ,  A ,    N0 , N4 , N2 ,  A) // ъ/Ъ
ZMK_UNICODE_PAIR(ru_bi   ,    N0 , N4 , N4 ,  B ,    N0 , N4 , N2 ,  B) // ы/Ы
ZMK_UNICODE_PAIR(ru_soft ,    N0 , N4 , N4 ,  C ,    N0 , N4 , N2 ,  C) // ь/Ь
ZMK_UNICODE_PAIR(ru_e    ,    N0 , N4 , N4 ,  D ,    N0 , N4 , N2 ,  D) // э/Э
ZMK_UNICODE_PAIR(ru_yu   ,    N0 , N4 , N4 ,  E ,    N0 , N4 , N2 ,  E) // ю/Ю
ZMK_UNICODE_PAIR(ru_ya   ,    N0 , N4 , N4 ,  F ,    N0 , N4 , N2 ,  F) // я/Я

// Special Letters
ZMK_UNICODE_PAIR(ru_yeyo ,    N0 , N4 , N3 ,  N5,    N0 , N4 , N5 , N1) // е/ё
ZMK_UNICODE_PAIR(ru_tone ,    N0 , N4 , N4 ,  C ,    N0 , N4 , N4 ,  A) // ь/ъ

#define MAKE_MOD_TAP(NAME, BINDING1, BINDING2) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "hold-preferred"; \
        tapping-term-ms = <200>; \
        bindings = <BINDING1>, <BINDING2>; \
    )


/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <6 18 30 39 40 7 8 9 10 11 19 20 21 22 23 31 32 33 34 35 41>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };
    };


    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        ru_yo {
            bindings = <&ru_yo>;
            key-positions = <5 40>;
            layers = <1>;
            timeout-ms = <50>;
        };

        ru_schya {
            bindings = <&ru_shch>;
            key-positions = <8 40>;
            layers = <1>;
            timeout-ms = <50>;
        };

        ru_hard_sign {
            bindings = <&ru_hard>;
            key-positions = <31 40>;
            layers = <1>;
            timeout-ms = <50>;
        };

        ru_layer_switch {
            bindings = <&to 1>;
            key-positions = <39 40>;
        };

        en_layer_switch {
            bindings = <&to 0>;
            key-positions = <37 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q           &kp W           &kp E               &kp R             &kp T        &kp Y      &kp U              &kp I                &kp O             &kp P                &none
&none  &hml LCTRL A           &hml LALT S           &hml LGUI D               &hml LSHFT F             &kp G        &kp H      &hmr LSHFT J              &hmr LGUI K                &hmr LALT L             &hmr LCTRL TILDE            &none
&none  &kp Z           &kp X           &kp C               &kp V             &kp B        &kp N      &kp M              &kp AMPERSAND        &kp LEFT_BRACKET  &kp RIGHT_BRACKET    &none
                                       &kp BACKSPACE       &mo 2             &kp SPACE    &kp SPACE  &mo 3              &kp ENTER
            >;
        };

        ru {
            bindings = <
&none  &ru_y   &ru_ts  &ru_u          &ru_k  &ru_ye       &ru_n      &ru_g     &ru_sh     &ru_z   &ru_kh  &none
&none  &ru_f   &ru_bi  &ru_v          &ru_a  &ru_p        &ru_r      &ru_o     &ru_l      &ru_d   &ru_zh  &none
&none  &ru_ya  &ru_ch  &ru_s          &ru_m  &ru_i        &ru_t      &ru_soft  &ru_b      &ru_yu  &ru_e   &none
                       &kp BACKSPACE  &mo 2  &kp SPACE    &kp SPACE  &mo 3     &kp ENTER
            >;
        };

        lower {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp N1        &kp N2        &kp N3        &kp N4             &kp N5             &kp N6      &kp N7                &kp N8                &kp N9   &kp N0   &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &kp K_MUTE  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp F11  &kp F12  &none
&none  &kp F1        &kp F2        &kp F3        &kp F4             &kp F5             &kp F6      &kp F7                &kp F8                &kp F9   &kp F10  &none
                                   &kp LGUI      &none              &kp SPACE          &kp RET     &none                 &kp RALT
            >;
        };

        raise {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp EXCL   &kp AT    &kp HASH   &kp DLLR           &kp PRCNT       &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &none
&none  &kp PG_UP  &kp UP    &kp PG_DN  &kp DOUBLE_QUOTES  &kp TILDE2      &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &none
&none  &kp LEFT   &kp DOWN  &kp RIGHT  &kp KP_DOT         &kp KP_COMMA    &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &none
                            &kp LGUI   &none              &kp SPACE       &kp SPACE  &none      &kp RALT
            >;
        };
    };
};
